pipeline {
    agent { 
        label 'node1' 
        }
    
    options {
        buildDiscarder(logRotator(numToKeepStr: '20'))
        disableConcurrentBuilds()
        timeout (time: 30, unit: 'MINUTES')
        timestamps()
      }
       
        stages {
    
        stage('Setup parameters') {
                steps {
                    script { 
                        properties([
                            parameters([
    
                                string(
                                    defaultValue: 'main', 
                                    name: 'branch', 
                                    trim: true
                                ),
    
                                string(
                                    defaultValue: 'tomcat', 
                                    name: 'ServiceName', 
                                    trim: true
                                ),
    
                                choice(
                                    choices: ['9090', '9091','9092', '9093','5050', '5051','7070', '7071'], 
                                    name: 'port'
                                ),
                            ])
                        ])
                    }
                }
            }
        
    
        stage('cloning repo ') {
            agent { 
        label 'node1' 
        }
                 
                steps {
                    sh '''
                    sudo rm -rf $WORKSPACE/* 
                    git clone --branch $branch https://github.com/devopseasylearning/SESSION-01-DEVELOPMENT.git
                    cd   $WORKSPACE/SESSION-01-DEVELOPMENT/
                    '''
                }
            }
    
    
    
            stage('Maven works  ') {
                  agent {
                docker {
                  label 'node1'  // both label and image
                  image 'devopseasylearning2021/s1-project02:maven-3.8.4-openjdk-8'
                }
              }
    
                steps {
                    sh '''
                  cd   $WORKSPACE/SESSION-01-DEVELOPMENT/
                    ls -l 
                    pwd
                    rm -rf webapp/target/webapp.war || true 
                    mvn clean
                    mvn validate 
                    mvn compile
                    mvn test
                    mvn package 
                    mvn verify 
                    mvn install
                    ls -l webapp
                    rm -rf $WORKSPACE/webapp.war || true 
                    cp -r webapp/target/webapp.war $WORKSPACE
                    ls -l 
                    pwd 
                    '''
                }
            }
    
    
    
            stage('SonarQube analysis') {
                agent {
                docker {
                  label 'node1'  // both label and image
                  image 'sonarsource/sonar-scanner-cli:4.7.0'
                }
               }
                   environment {
            CI = 'true'
            //  scannerHome = tool 'Sonar'
            scannerHome='/opt/sonar-scanner'
        }
                steps{
                    withSonarQubeEnv('Sonar') {
                        sh "${scannerHome}/bin/sonar-scanner"
                    }
                }
            }
    



           
    stage('deployement test') {
        agent { 
        label 'node1' 
        }
     steps {
         sh '''
       cd   $WORKSPACE/SESSION-01-DEVELOPMENT/
rm -rf Dockerfile || true 
    
cat <<EOF > Dockerfile
FROM tomcat:8.0-alpine
COPY ./webapp.war  /usr/local/tomcat/webapps
EOF

docker build -t devopseasylearning2021/challenger:${BUILD_NUMBER} .
docker images 

    docker-compose down || true 
    docker rm -f $ServiceName
    rm -rf docker-compose.yml || true 


cat <<EOF > docker-compose.yml
    version : "3.3"
    services:
      $ServiceName:
           image: devopseasylearning2021/challenger:${BUILD_NUMBER}
           expose:
            - 8080
           container_name: $ServiceName
           restart: always
    
           ports: 
            - $port:8080
    
EOF
    
    ls -l
    curl ifconfig.co 
    docker-compose up -d 
    docker-compose ps 
    docker images prune -f  || true
    
                    '''
                }
            }
    
          
    
        }
    
    
    
    
    
    }
    
    
    
        
     
    
