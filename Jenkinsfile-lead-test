pipeline {
  agent any
    options {
        buildDiscarder(logRotator(numToKeepStr: '20'))
        disableConcurrentBuilds()
        timeout (time: 30, unit: 'MINUTES')
        timestamps()
      }
       
       
        environment {
		DOCKERHUB_CREDENTIALS=credentials('dockerhub')
	}
        



        stages {
    
        stage('Setup parameters') {
                steps {
                    script { 
                        properties([
                            parameters([
    
                                string(
                                    defaultValue: 'main', 
                                    name: 'branch', 
                                    trim: true
                                ),

    
                                choice(
                                    choices: ['9090', '9091','9092', '9093','5050', '5051','7070', '7071'], 
                                    name: 'port'
                                ),
                            ])
                        ])
                    }
                }
            }
        
    
        stage('cloning repo ') {
              
                steps {
                    sh '''
                    sudo rm -rf $WORKSPACE/* 
                    git clone --branch $branch https://github.com/devopseasylearning/SESSION-01-DEVELOPMENT.git
                    cd   SESSION-01-DEVELOPMENT/
                    '''
                }
            }
    
    
    
            stage('SonarQube analysis') {
                agent {
                docker {
                 
                  image 'sonarsource/sonar-scanner-cli:4.7.0'
                }
               }
                   environment {
            CI = 'true'
            //  scannerHome = tool 'Sonar'
            scannerHome='/opt/sonar-scanner'
        }
                steps{
                    withSonarQubeEnv('Sonar') {
                        sh "${scannerHome}/bin/sonar-scanner"
                    }
                }
            }
    



stage('Login') {

			steps {
				sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'
			}
		}


        
    stage('build appserver') {
      
     steps {
         sh '''
        cd yelb-appserver
        docker build -t devopseasylearning2021/challenger:appserver-${BUILD_NUMBER} . 
        cd -
    
                    '''
                }
            }
    
    
    stage('build yelb-db') {
      
     steps {
         sh '''
        cd yelb-db
        docker build -t devopseasylearning2021/challenger:yelb-db-${BUILD_NUMBER} . 
        cd -
    
                    '''
                }
            }


     stage('build yelb-ui') {
      
     steps {
         sh '''
        cd yelb-ui
        docker build -t devopseasylearning2021/challenger:yelb-ui-${BUILD_NUMBER} . 
        cd -
    
                    '''
                }
            }
       


    
          
    
      
    
    
    stage('bring up application ') {
              
                steps {
                    sh '''
 rm -rf docker-compose.yml || true
 cat <<EOF > docker-compose.yml
version: "3.0"
services:
  yelb-ui:
    image: devopseasylearning2021/challenger:yelb-ui-${BUILD_NUMBER}
    depends_on:
      - yelb-appserver
    ports:
      - $port:80
    networks:
      - yelb-network

  yelb-appserver:
    image: devopseasylearning2021/challenger:appserver-${BUILD_NUMBER}
    depends_on:
      - redis-server
      - yelb-db
    networks:
      - yelb-network

  redis-server:
    image: redis:4.0.2
    networks:
      - yelb-network

  yelb-db:
    image: devopseasylearning2021/challenger:yelb-db-${BUILD_NUMBER}
    networks:
      - yelb-network


networks:
  yelb-network:
    driver: bridge 

EOF

docker compose up -d 

IP=${curl ifconfig.co}

echo "The project is available at $IP:$port"
                    '''
                }
            }
    
    
}

   post {
   
   success {
      slackSend (channel: '#development-alerts', color: 'good', message: "SUCCESSFUL:  Branch name  <<${env.BRANCH_NAME}>>  on job Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
    }

 
    unstable {
      slackSend (channel: '#development-alerts', color: 'warning', message: "UNSTABLE:  Branch name  <<${env.BRANCH_NAME}>>  Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
    }

    failure {
      slackSend (channel: '#development-alerts', color: '#FF0000', message: "FAILURE:  Branch name  <<${env.BRANCH_NAME}>> Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
    }
   
    cleanup {
      deleteDir()
    }
}



    
    }
    
    
    
        
     
    
