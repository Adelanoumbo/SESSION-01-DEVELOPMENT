pipeline {
  agent any
    options {
        buildDiscarder(logRotator(numToKeepStr: '20'))
        disableConcurrentBuilds()
        timeout (time: 30, unit: 'MINUTES')
        timestamps()
      }
       
        stages {
    
        stage('Setup parameters') {
                steps {
                    script { 
                        properties([
                            parameters([
    
                                string(
                                    defaultValue: 'main', 
                                    name: 'branch', 
                                    trim: true
                                ),
    
                                string(
                                    defaultValue: 'tomcat', 
                                    name: 'ServiceName', 
                                    trim: true
                                ),
    
                                choice(
                                    choices: ['9090', '9091','9092', '9093','5050', '5051','7070', '7071'], 
                                    name: 'port'
                                ),
                            ])
                        ])
                    }
                }
            }
        
    
        stage('cloning repo ') {
              
                steps {
                    sh '''
                    sudo rm -rf $WORKSPACE/* 
                    git clone --branch $branch https://github.com/devopseasylearning/SESSION-01-DEVELOPMENT.git
                    cd   SESSION-01-DEVELOPMENT/
                    rm -rf  webapp/target/webapp.war || true 
                    
cat <<EOF > sonar-project.properties
#sonar.login=admin
#sonar.password=admin
sonar.host.url=https://sonarqube.ektechsoftwaresolution.com/
sonar.projectKey=maven-project-branch-test
sonar.projectName=maven-project-branch-test
sonar.projectVersion=1.0
sonar.sources=.
sonar.language=java
sonar.java.binaries=.
EOF

                    '''
                }
            }
    
    
    
            stage('Maven works  ') {
                  agent {
                docker {
                  
                  image 'devopseasylearning2021/s1-project02:maven-3.8.4-openjdk-8'
                }
              }
    
                steps {
                    sh '''

                    ls -l 
                    pwd
                    rm -rf  webapp/target/webapp.war || true 
                    mvn clean
                    mvn validate 
                    mvn compile
                    mvn test
                    mvn package 
                    mvn verify 
                    mvn install
                    ls -l webapp
                    rm -rf $WORKSPACE/webapp.war || true 
                    cp -r webapp/target/webapp.war  .
                    ls -l 
                    pwd 
                    '''
                }
            }
    
    
    
            stage('SonarQube analysis') {
                agent {
                docker {
                 
                  image 'sonarsource/sonar-scanner-cli:4.7.0'
                }
               }
                   environment {
            CI = 'true'
            //  scannerHome = tool 'Sonar'
            scannerHome='/opt/sonar-scanner'
        }
                steps{
                    withSonarQubeEnv('Sonar') {
                        sh "${scannerHome}/bin/sonar-scanner"
                    }
                }
            }
    



           
    stage('deployement test') {
      
     steps {
         sh '''

rm -rf Dockerfile || true 
 
cat <<EOF > Dockerfile
FROM tomcat:8.0-alpine
COPY ./webapp.war  /usr/local/tomcat/webapps
EOF

docker rmi -f $(docker images -aq) || true
docker build -t devopseasylearning2021/challenger:${BUILD_NUMBER} .
docker images 

    docker-compose down || true 
    docker rm -f $ServiceName
    rm -rf docker-compose.yml || true 


cat <<EOF > docker-compose.yml
    version : "3.3"
    services:
      $ServiceName:
           image: devopseasylearning2021/challenger:${BUILD_NUMBER}
           expose:
            - 8080
           container_name: $ServiceName
           restart: always
    
           ports: 
            - $port:8080
    
EOF
    

    curl ifconfig.co 
    docker-compose up -d 
    docker-compose ps 
    docker images prune -f  || true
    
                    '''
                }
            }
    
          
    
        }
    
    
    post {
   
   success {
      slackSend (channel: '#development-alerts', color: 'good', message: "SUCCESSFUL:  Branch name  <<${env.BRANCH_NAME}>>  on job Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
    }

 
    unstable {
      slackSend (channel: '#development-alerts', color: 'warning', message: "UNSTABLE:  Branch name  <<${env.BRANCH_NAME}>>  Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
    }

    failure {
      slackSend (channel: '#development-alerts', color: '#FF0000', message: "FAILURE:  Branch name  <<${env.BRANCH_NAME}>> Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
    }
   
    cleanup {
      deleteDir()
    }
}


    
    
    
    }
    
    
    
        
     
    
