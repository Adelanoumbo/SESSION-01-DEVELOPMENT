pipeline {
    agent any

environment {
		DOCKERHUB_CREDENTIALS=credentials('dockerhub')
	}
    
    
    
    options {
    buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '3', numToKeepStr: '5'))
    disableConcurrentBuilds() }

    stages {

    
        stage('build image') {
            steps {
              sh '''
                docker build -t cedric:001 .
              '''
            }
        }

        stage('checking images') {
            steps {
                sh '''
                docker images
                '''
            }
        }


     stage('tag image') {
            steps {
                sh '''
                docker tag cedric:001 devopseasylearning2021/cedric_0314:ced.image.003
                '''
            }
        }
	
	
	

       stage('Docker Login') {

			steps {
				sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'
			}
		}




        stage('push my image') {
            steps {
                sh '''
                docker push devopseasylearning2021/cedric_0314:ced.image.003
                '''
            }
        }





    }




post {
   
   success {
      slackSend (channel: '#development-alerts', color: 'good', message: "SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
    }

 
    unstable {
      slackSend (channel: '#development-alerts', color: 'warning', message: "UNSTABLE: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
    }

    failure {
      slackSend (channel: '#development-alerts', color: '#FF0000', message: "FAILURE: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
    }
   
    cleanup {
      deleteDir()
    }


  }

}
