pipeline {
    agent any
    environment {
     DOCKERHUB_CREDENTIALS=credentials('dockerhub')
    }
    options {
    buildDiscarder(logRotator(numToKeepStr: '30', artifactNumToKeepStr: '30'))
  }

    stages {
        stage('Build images') {
            steps {
                sh '''
               docker build -t duclair:002 .

                '''
            }
        }


stage('tag image') {
            steps {
            sh '''
       docker tag duclair:001 devopseasylearning2021/duclair:002

                '''
            }
        }

stage('docker login') {
            steps {
                sh '''
 

                '''
            }
        }



stage('docker push') {
            steps {
            sh '''
       docker push  devopseasylearning2021/duclair:002

                '''
            }
        }

stage('Login') {

			steps {
				sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'
			}
		}






    }





}
post {
   
   success {
      slackSend (channel: '#development-alerts', color: 'good', message: "SUCCESSFUL:  Branch name  <<${env.BRANCH_NAME}>>  Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
    }

 
    unstable {
      slackSend (channel: '#development-alerts', color: 'warning', message: "UNSTABLE:  Branch name  <<${env.BRANCH_NAME}>>  Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
    }

    failure {
      slackSend (channel: '#development-alerts', color: '#FF0000', message: "FAILURE:  Branch name  <<${env.BRANCH_NAME}>> Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
    }
   
    cleanup {
      deleteDir()
    }
}




}
